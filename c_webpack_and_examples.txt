# For current folder mapping:
#   - windows "command prompt": %cd%
#   - powershell: ${PWD}
#   - bash: $(pwd)
# In the following examples I will use powershell and ${pwd}
#
# build image:
> docker build -t webpack_gyp_for_dev -f webpack_gyp_for_dev.Dockerfile .
> docker build -t webpack_gyp_for_dev:8.9-alpine -f webpack_gyp_for_dev.Dockerfile .
> docker build -t ptrn2l2/webpack_gyp_for_dev -f webpack_gyp_for_dev.Dockerfile .
> docker build -t ptrn2l2/webpack_gyp_for_dev:8.9-alpine -f webpack_gyp_for_dev.Dockerfile .
#
> docker run --rm -it -v ${pwd}:/workdir -v npm_g_for_dev_vol:/workdir/node_modules --name webpack_gyp_for_dev --entrypoint sh webpack_gyp_for_dev:8.9-alpine
> docker run --rm -it -v ${pwd}:/workdir -v npm_g_for_dev_vol:/workdir/node_modules --name webpack_gyp_for_dev --entrypoint sh webpack_gyp_for_dev:8.9-alpine -c "pwd && ls"
> docker run --rm -it -v ${pwd}:/workdir -v npm_g_for_dev_vol:/workdir/node_modules  --env NODE_ENV=development --name webpack_gyp_for_dev --entrypoint npm webpack_gyp_for_dev:8.9-alpine install
> docker run --rm -it -v ${pwd}:/workdir -v npm_g_for_dev_vol:/workdir/node_modules  --env NODE_ENV=development --name webpack_gyp_for_dev --entrypoint sh webpack_gyp_for_dev:8.9-alpine -c "npm watch"
